#include <iostream>
#include <queue>
#include <vector>
#include <cstdio>
#pragma warning(disable:4996)
using namespace std;

class pos {
public:
	int x, y;
	pos(int a, int b) {
		this->x = a;
		this->y = b;
	}
};

const int dx[4] = { 0,0,1,-1 };
const int dy[4] = { 1,-1,0,0 };

char map[110][110];
bool chk[110][110];

queue<pos> qr;

int n;

int bfs_red() {
	int cnt = 0;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (map[i][j] == 'R' && chk[i][j] == false) {
				qr.push(pos(i, j));
				chk[i][j] = true;
				while (!qr.empty()) {
					int nx = qr.front().x;
					int ny = qr.front().y;
					qr.pop();
					for (int k = 0; k < 4; k++) {
						int mx = nx + dx[k];
						int my = ny + dy[k];

						if (chk[mx][my] == false && map[mx][my] == 'R') {
							qr.push(pos(mx, my));
							chk[mx][my] = true;
						}
					}
				}
				cnt++;
			}
		}
	}
	return cnt;
}

int bfs_green() {
	int cnt = 0;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (map[i][j] == 'G' && chk[i][j] == false) {
				qr.push(pos(i, j));
				chk[i][j] = true;
				while (!qr.empty()) {
					int nx = qr.front().x;
					int ny = qr.front().y;
					qr.pop();
					for (int k = 0; k < 4; k++) {
						int mx = nx + dx[k];
						int my = ny + dy[k];

						if (chk[mx][my] == false && map[mx][my] == 'G') {
							qr.push(pos(mx, my));
							chk[mx][my] = true;
						}
					}
				}
				cnt++;
			}
		}
	}
	return cnt;
}



int bfs_blue() {
	int cnt = 0;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (map[i][j] == 'B' && chk[i][j] == false) {
				qr.push(pos(i, j));
				chk[i][j] = true;
				while (!qr.empty()) {
					int nx = qr.front().x;
					int ny = qr.front().y;
					qr.pop();
					for (int k = 0; k < 4; k++) {
						int mx = nx + dx[k];
						int my = ny + dy[k];

						if (chk[mx][my] == false && map[mx][my] == 'B') {
							qr.push(pos(mx, my));
							chk[mx][my] = true;
						}
					}
				}
				cnt++;
			}
		}
	}
	return cnt;
}


int main() {
	cin >> n;
	int R, G, B,X;
	for (int i = 1; i <= n; i++){
		for (int j = 1; j <=n; j++){
			scanf(" %c", &map[i][j]); 
		}
	}
	R = bfs_red();
	B= bfs_blue();
	G = bfs_green();

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			chk[i][j] = false;
			if (map[i][j] == 'G') map[i][j] = 'R';
		}
	}
	X = bfs_red();
	cout << R+B+G<< " "<<X+B<< '\n';
	
}
