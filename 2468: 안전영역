#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

int N, maxHeight, map[101][101], result, numOfarea;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
bool visit[101][101];

class pos {
public:
	int x, y;
	pos(int ax, int ay) :x(ax), y(ay) {};
};

queue<pos> q;
//Only Some Point
//다 같은 경우
void findSafeArea(int i, int j, int height) {
	q.push(pos(i, j));
	visit[i][j] = true;
	while (!q.empty()) {
		pos fr = q.front();
		q.pop();
		for (int p = 0; p < 4; p++) {
			int ax = fr.x + dx[p];
			int ay = fr.y + dy[p];

			if (ax < 1 || ax > N || ay < 1 || ay > N) continue;
			if (visit[ax][ay]) continue;
			if (map[ax][ay] <= height) continue;

			visit[ax][ay] = true;
			//cout << "***" << ax << " " << ay << '\n';
			q.push(pos(ax, ay));
		}
	}
}
//After reset
void MyReset() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			visit[i][j] = false;
		}
	}
	numOfarea = 0;
}



int main() {
	bool allTheSame = true;
	cin >> N;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
			maxHeight = max(maxHeight, map[i][j]);
			if (map[1][1] != map[i][j]) allTheSame = false;
		}
	}

	if (allTheSame) {
		cout << 1 << '\n';
		return 0;
	}

	for (int k = 1; k <= maxHeight; k++) {
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if (map[i][j] > k && !visit[i][j]) {
					findSafeArea(i, j, k);
					numOfarea++;
				}
			}
		}
		result = max(result, numOfarea);
		MyReset();
	}
	cout << result << '\n';
}

