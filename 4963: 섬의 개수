#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

class pos {
public:
	int x, y;
	pos(int a, int b) :x(a), y(b) {};
	pos() {};
};

int map[51][51], w, h, cnt;
bool visit[51][51];
int ddx[8] = { 0,0,1,-1,1,-1,1,-1 };
int ddy[8] = { 1,-1,0,0,1,1,-1,-1 };
queue<pos> q;
void myReset() {
	for (int i = 1; i <= 50; i++) {
		for (int j = 1; j <= 50; j++) {
			visit[i][j] = false;
			map[i][j] = 0;
		}
	}
	cnt = 0;
}

void findIsland() {
	for (int i = 1; i <= h; i++) {
		for (int j = 1; j <= w; j++) {
			if (map[i][j] == 1 && visit[i][j] == false) {
				cnt++;
				visit[i][j] = true;
				q.push(pos(i, j));
				while (!q.empty()) {
					int qsize = q.size();
					for (int k = 0; k < qsize; k++) {
						pos p = q.front();
						q.pop();
						for (int l = 0; l < 8; l++) {
							int tx = p.x + ddx[l];
							int ty = p.y + ddy[l];

							if (tx < 1 || tx > h || ty < 1 || ty > w) continue;
							if (visit[tx][ty]) continue;
							if (map[tx][ty] == 0) continue;

							visit[tx][ty] = true;
							q.push(pos(tx, ty));
						}
					}
				}
			}
		}
	}
	cout <<cnt << '\n';
}

int main() {
	while (1) {
		cin >> w >> h;
		if (w == 0 && h == 0) return 0;
		for (int i = 1; i <= h; i++) {
			for (int j = 1; j <= w; j++) {
				cin >> map[i][j];
			}
		}
		findIsland();
		myReset();
	}
}
