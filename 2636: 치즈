#include <iostream>	
#include <queue>
using namespace std;

class pos {
public:
	int x, y;
	pos(int ax, int ay) :x(ax), y(ay) {};
};

int N, M, T, zeroArea, result;
int map[102][102];
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
bool visit[102][102], chk[102][102];
queue<pos> q;

void printMap() {
	cout << '\n';
	for (int i = 1; i <= N; i++) {
		for (int j = 1;  j <= M; j++) {
			cout << map[i][j] << " ";
		}
		cout << '\n';
	}
}

void visitReset() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			visit[i][j] = false;
		}
	}
}

void chkReset() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			chk[i][j] = false;
		}
	}
}

void findArea() {
	zeroArea = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (map[i][j] == 0 && visit[i][j] == false) {
				++zeroArea;
				visit[i][j] = true;
				chk[i][j] = true;
				q.push(pos(i, j));
				while (!q.empty()) {
					pos fr = q.front();
					q.pop();
					for (int k = 0; k < 4; k++) {
						int tx = fr.x + dx[k];
						int ty = fr.y + dy[k];

						if (tx<1 || tx>N || ty<1 || ty > M)continue;
						if (visit[tx][ty]) continue;
						if (map[tx][ty] == 1) continue;

						visit[tx][ty] = true;
						chk[tx][ty] = true;
						q.push(pos(tx, ty));
						++zeroArea;
					}
				}
			}
		}
	}
	visitReset();
	chkReset();

	visit[1][1] = true;
	chk[1][1] = true;
	q.push(pos(1, 1));
	while (!q.empty()) {
		pos fr = q.front();
		q.pop();
		for (int k = 0; k < 4; k++) {
			int tx = fr.x + dx[k];
			int ty = fr.y + dy[k];

			if (tx<1 || tx>N || ty<1 || ty > M)continue;
			if (visit[tx][ty]) continue;
			if (map[tx][ty] == 1) continue;

			visit[tx][ty] = true;
			chk[tx][ty] = true;
			q.push(pos(tx, ty));
		}
	}
	result = M*N - zeroArea;
}

void melt() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (map[i][j] == 1) {
				for (int k = 0; k < 4; k++) {
					int tx = i + dx[k];
					int ty = j + dy[k];

					if (tx<1 || tx>N || ty<1 || ty > M)continue;
					if (chk[tx][ty]) {
						map[i][j] = 0;
						break;
					}
				}
			}
		}
	}
	chkReset();
	visitReset();
}

int main() {
	int temp = 0;
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> map[i][j];
		}
	}

	while (1) {
		findArea();
		melt();
		if (zeroArea == M*N) { cout << T << '\n' << temp << '\n'; return 0; }
		T++;
		temp = result;
	}
}
