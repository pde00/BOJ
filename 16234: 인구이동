#include <iostream>
#include <queue>
#include <cmath>
#include <vector>
using namespace std;

class pos {
public:
	int x, y;
	pos(int ax, int ay) :x(ax), y(ay) {};
};

int N, L, R, map[52][52], temp[52][52];
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
bool visit[52][52];
queue<pos> q;

void myReset() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			visit[i][j] = false;
		}
	}
}

bool isSame() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			if (map[i][j] != temp[i][j]) { return false; }
		}
	}
	return true;
}

void saveMap() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			temp[i][j] = map[i][j];
		}
	}
}

void go() {
	int endTime = 0;
	while (1) {
		saveMap();
		for (int i = 1; i <= N; i++) {
			for (int j = 1; j <= N; j++) {
				if (visit[i][j] == false) {
					int cnt = 1;
					int sum = map[i][j];
					int mean = 0;
					vector<pos> pList;
					visit[i][j] = true;
					pList.push_back(pos(i, j));
					q.push(pos(i, j));
					while (!q.empty()) {
						pos fr = q.front();
						q.pop();
						for (int k = 0; k < 4; k++) {
							int tx = fr.x + dx[k];
							int ty = fr.y + dy[k];

							if (tx < 1 || tx > N || ty < 1 || ty>N)continue;
							if (visit[tx][ty])continue;
							if (abs(map[fr.x][fr.y] - map[tx][ty]) > R)continue;
							if (abs(map[fr.x][fr.y] - map[tx][ty]) < L)continue;

							cnt++;
							sum += map[tx][ty];
							visit[tx][ty] = true;
							q.push(pos(tx, ty));
							pList.push_back(pos(tx, ty));
						}
					}
					mean = sum / cnt;
					for (int s = 0; s < pList.size(); s++) {
						map[pList.at(s).x][pList.at(s).y] = mean;
					}
				}
			}
		}
		myReset();	
		if (isSame()) { cout << endTime << '\n'; return; }
		else { endTime++; }
	}
}

int main() {
	cin >> N >> L >> R;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= N; j++) {
			cin >> map[i][j];
		}
	}
	go();
}
