#include <iostream>
#include <queue>
using namespace std;

class pos{
    public:
        int x,y;
        pos(int ax, int ay): x(ax), y(ay) {};
};

queue<pos> q;
bool visit[301][301];
int T, l, cnt, kx, ky, tx, ty;
int dx[8] = {2,2,1,1,-1,-1,-2,-2};
int dy[8] = {1,-1,2,-2,2,-2,1,-1};

void myReset(){
    cnt = 0;
    for(int i = 0; i < 300; i ++){
        for(int j = 0; j < 300; j ++){
            visit[i][j] = 0;
            if(!q.empty()) q.pop();
        }
    }
}

void moveKnight(){
    //If initial Point is same with Target Point
    if(kx == tx && ky == ty){ cout << 0 << '\n'; return;}
    //Else
    visit[kx][ky] = true;
    q.push(pos(kx,ky));
    while(!q.empty()){
        int qsize = q.size();
        for(int i = 0; i < qsize; i ++){
            pos p = q.front();        
            q.pop();
            for(int j = 0; j < 8; j ++){
                int mx = p.x + dx[j];
                int my = p.y + dy[j];

                if(mx < 0 || mx >= l || my < 0 || my >= l) continue;
                if(visit[mx][my]) continue;
                if((mx == tx) && (my == ty)) { cout << ++cnt << '\n'; return;}

                visit[mx][my] = true;
                q.push(pos(mx,my));
            }
        }
        cnt++;
    }
}

int main(void){
    cin >> T;
    while(T--){
        cin >> l >> kx >> ky >> tx >> ty;
        moveKnight();
        myReset();
    }
}
