#include <iostream>
#include <queue>
using namespace std;

class pos {
public:
	int x, y;
	pos(int ax, int ay) :x(ax), y(ay) {};
};

int N, M, map[102][102], T;
int dx[4] = { 0,0,1,-1 };
int dy[4] = { 1,-1,0,0 };
bool chk[102][102], visit[102][102];
queue<pos> q;

void printChk() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cout << chk[i][j] << " ";
		}
		cout << '\n';
	}
}

void chkReset() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			chk[i][j] = false;
		}
	}
}

void visitReset() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			visit[i][j] = false;
		}
	}
}

void melt() {
	while(1){
	bool flag = true;
	visit[1][1] = true;
	chk[1][1] = true;
	q.push(pos(1, 1));
	//find Outer 0 area, And memorize in Chk Array
	while (!q.empty()) {
		pos fr = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int tx = fr.x + dx[i];
			int ty = fr.y + dy[i];

			if (tx<1 || tx>N || ty<1 || ty>M)continue;
			if (visit[tx][ty])continue;
			if (map[tx][ty] == 0) {
				visit[tx][ty] = true;
				chk[tx][ty] = true;
				q.push(pos(tx, ty));
			}
		}
	}
	//Find Which point is melt
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (map[i][j] == 1) {
				flag = false;
				int cnt = 0;
				for (int k = 0; k < 4; k++) {
					int px = i + dx[k];
					int py = j + dy[k];

					if (px <1 || px>N || py <1 || py>M) continue;
					if (chk[px][py])cnt++;
				}
				if (cnt >= 2) { map[i][j] = 0; }
			}
		}
	}
	//All melt
	if (flag) { cout << T << '\n'; return; }
	else T++;
	//Reset
	chkReset();
	visitReset();
	}
}

int main() {
	cin >> N >> M;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			cin >> map[i][j];
		}
	}
	melt();
}
